<?php

/**
 * This class has been auto-generated by the Doctrine ORM Framework
 */
class Question extends BaseQuestion
{
	public function setTitle($v)
	{
		$this->rawSet('title', $v);

		$this->setStrippedTitle(myTools::stripText($v));
	}

	public static function getHomepagePager($page)
	{
		/*
		 * Pagination sfDoctrine style
		 */
		$per_page = sfConfig::get('app_pager_homepage_max');
		 
		$pager = new sfDoctrinePager('Question', $per_page);
		$pager->getQuery()->from('Question q, q.User u');
		$pager->setPage($page);
		$pager->init();
		 
		return $pager;
	}
	
	public static function getQuestionFromTitle($title)
	{
		$question = Doctrine_Query::create()
					->select ('q.*, qu.*, a.*, u.*')
					->from('Question q, q.User qu, q.Answers a, a.User u')
    				->where('q.stripped_title = ?', $title)
    				->execute()->getFirst();
    				
    	return $question;
	}

	public static function getRecentPager($page)
	{
		$per_page = sfConfig::get('app_pager_homepage_max');
		
		/*
		 * Pagination sfDoctrine style
		 */
		$pager = new sfDoctrinePager('Question', $per_page);
		$pager->getQuery()->from('Question q')->orderBy('q.created_at DESC');
		$pager->setPage($page);
		$pager->init();
		
		/*
		 * Pagination Doctrine style
		 
		$pager = new Doctrine_Pager(
			
			Doctrine_Query::create()
				->from('Question q')
				->orderBy('q.created_at DESC'),
				
			$page,
			$per_page
		
		);
		*/
		return $pager;
	}
	
	public function setBody($v)
	{
		$this->rawSet('body', $v);
		
		require_once('markdown.php');
		
		//strip all html tags from text
		$v = htmlentities($v, ENT_QUOTES, 'UTF-8');
		
		$this->setHtmlBody(markdown($v));
	}
	
	public function getTags()
	{
		/*
		$c = new Criteria();
		$c->clearSelectColumns();
		$c->addSelectColumn(QuestionTagPeer::NORMALIZED_TAG);
		$c->add(QuestionTagPeer::QUESTION_ID, $this->getId());
		$c->setDistinct();
		$c->addAscendingOrderByColumn(QuestionTagPeer::NORMALIZED_TAG);

		$tags = array();
		$rs = QuestionTagPeer::doSelectRS($c);
		while ($rs->next())
		{
			$tags[] = $rs->getString(1);
		}
		*/
		
		$tags = Doctrine_Query::create()
							->select('DISTINCT t.normalized_tag')
							->from('QuestionTag t')
							->where('t.question_id = ?', $this->getId())
							->fetchArray();
							

		return $tags;
	}
	
	public function getPopularTags($max = 5)
	{
		$tags = array();
		
		$results = Doctrine_Query::create()
								->select('t.normalized_tag tag, COUNT(t.normalized_tag) count')
								->from('QuestionTag t')
								->where('t.question_id = ?', $this->getId())
								->groupBy('t.normalized_tag')
								->orderBy('count DESC')
								->Limit($max)
								->execute();
		
		foreach($results as $result)
		{
			$tags[$result['tag']] = $result['count'];
		}
								
		return $tags;
	}
	
	public static function getPopularByTag($tag, $page)
	{
		$per_page = sfConfig::get('app_pager_homepage_max');
		 
		$pager = new sfDoctrinePager('Question', $per_page);
		$pager->getQuery()->from('Question q, q.User u, q.QuestionTags qt')
						->where('qt.normalized_tag = ?', $tag)
						->orderBy('q.interested_users DESC');
						
		$pager->setPage($page);
		$pager->init();
		 
		return $pager;
	}
	
	public function addTagsForUser($phrase, $userId)
	{
		// split phrase into individual tags
		$tags = Tag::splitPhrase($phrase);

		// add tags
		foreach ($tags as $tag)
		{
			$questionTag = new QuestionTag();
			$questionTag->setQuestionId($this->getId());
			$questionTag->setUserId($userId);
			$questionTag->setTag($tag);
			$questionTag->save();
		}
	}

}